name: Daily GitHub Activity

env:
  TZ: Asia/Shanghai  # 全局北京时间

on:
  schedule:
    - cron: '0 00 * * *'  # UTC 0 点触发 = 北京时间 8 点
  workflow_dispatch:

jobs:
  daily-activity:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}

      # 2. Weekend lazy check
      - name: Weekend lazy check
        id: lazy
        run: |
          DOW=$(date +%u)
          if [ "$DOW" -gt 5 ] && [ $((RANDOM % 100)) -lt 20 ]; then     # 周末偷懒概率 (%)
            echo "lazy=true" >> $GITHUB_OUTPUT
            echo "今天周末，选择摸鱼 ✨" >> update.md
          else
            echo "lazy=false" >> $GITHUB_OUTPUT
          fi

      # 3. Random delay
      - name: Random delay
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          DELAY=$((RANDOM % 21600))   # 0~6小时随机延迟
          sleep $DELAY

      # 4. Ensure update.md exists
      - name: Ensure update.md exists
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          [ -f update.md ] || echo "# Daily Commit Log" > update.md

      # 5. Write daily intro
      - name: Write daily intro
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          LOG_DATE=$(date '+%Y-%m-%d %H:%M:%S')
          echo -e "\n## $LOG_DATE" >> update.md
          MOODS=("🤖 开始今天的 Github 任务！")
          echo "${MOODS}" >> update.md
          done

      # 6. Commit & push log
      - name: Commit and push log
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add update.md
          git commit -m "chore: daily log update" || echo "No changes"
          git fetch origin main
          git rebase origin/main || git rebase --abort
          git push origin HEAD:main || git push --force-with-lease origin HEAD:main

      # 7. Clean logs older than 7 days
      - name: Clean logs older than 7 days
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          FILE="update.md"
          if [ -f "$FILE" ]; then
            SEVEN_DAYS_AGO=$(date -d '7 days ago' '+%Y-%m-%d')
            awk -v d="$SEVEN_DAYS_AGO" '/^## / {date=$2} date >= d {print}' "$FILE" > "$FILE.tmp"
            mv "$FILE.tmp" "$FILE"
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add "$FILE"
            git commit -m "chore: clean logs older than 7 days" || echo "No changes"
            git fetch origin main
            git rebase origin/main || git rebase --abort
            git push origin HEAD:main || git push --force-with-lease origin HEAD:main
          fi

      # 8a. Create Issue
      - name: Create Issue
        if: steps.lazy.outputs.lazy != 'true'
        id: create-issue
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          PROB_ISSUE=50     # Issue 创建概率（%）
          RAND_ISSUE=$((RANDOM % 100 + 1))
          CREATED_ISSUE=0
          if [ $RAND_ISSUE -le $PROB_ISSUE ]; then
            gh issue create --title "Daily Issue - $(date '+%Y-%m-%d %H:%M:%S')" \
                            --body "随机生成每日 Issue 🌱" \
                            --repo $GITHUB_REPOSITORY
            echo "📝 创建了一个 Issue" >> update.md
            CREATED_ISSUE=1
          else
            echo "今天不创建 Issue 🌱" >> update.md
          fi
          echo "CREATED_ISSUE=$CREATED_ISSUE" >> $GITHUB_OUTPUT

      # 8b. Create Pull Request
      - name: Create Pull Request
        if: steps.lazy.outputs.lazy != 'true'
        id: create-pr
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          PROB_PR=50     # PR 创建概率（%）
          RAND_PR=$((RANDOM % 100 + 1))
          CREATED_PR=0
          if [ $RAND_PR -le $PROB_PR ]; then
            BRANCH="daily-pr-$(date '+%Y%m%d%H%M%S')"
            git checkout -b "$BRANCH"
            echo "$(date '+%Y-%m-%d %H:%M:%S') - 自动 PR 日志 🌱" >> update.md
            git add update.md
            git commit -m "chore: daily PR update"
            git push origin "$BRANCH"
            gh pr create --title "Daily PR - $(date '+%Y-%m-%d %H:%M:%S')" \
                         --body "随机生成每日 PR 🌱" \
                         --base main --head "$BRANCH" --repo $GITHUB_REPOSITORY
            echo "📦 提交了一个 PR" >> update.md
            CREATED_PR=1
          else
            echo "今天不创建 PR 🌱" >> update.md
          fi
          echo "CREATED_PR=$CREATED_PR" >> $GITHUB_OUTPUT
          
      # 9. Auto Review & Merge PR
      - name: Auto Review and Merge
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          TARGET_REPO="${GITHUB_REPOSITORY}"
          PR_LIST=$(gh pr list --state open --repo "$TARGET_REPO" --json number -q '.[].number')
          if [ -n "$PR_LIST" ]; then
            PR_NUM=$(echo "$PR_LIST" | shuf -n1)
            gh pr review "$PR_NUM" --comment --body "🤖 自动审查：LGTM！"
            gh pr merge "$PR_NUM" --squash --delete-branch --repo "$TARGET_REPO" --admin
            echo "✅ 自动合并了 PR #$PR_NUM" >> update.md
          fi

      # 10. Star & Fork random repos
      - name: Star and Fork random repos
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          STAR_COUNT=0
          FORK_COUNT=0
          PROB_ACTION=30     # Star & Fork 概率（%）
          RAND=$(( RANDOM % 100 + 1 ))

          if [ $RAND -le $PROB_ACTION ]; then
            ACTION_COUNT=$((RANDOM % 2 + 1))
            repos=$(gh api search/repositories -X GET -F q='stars:>50000 sort:stars' --jq '.items[].full_name' | shuf -n $ACTION_COUNT)
            for repo in $repos; do
              # Star
              gh api --method PUT "user/starred/$repo"
              echo "⭐ Starred $repo" >> update.md
              STAR_COUNT=$((STAR_COUNT+1))

              # Fork
              gh repo fork "$repo" --clone=false
              echo "🍴 Forked $repo" >> update.md
              FORK_COUNT=$((FORK_COUNT+1))

              # 获取英文描述
              desc=$(gh api repos/$repo --jq '.description')

              if [ -n "$desc" ]; then
                # 调用 Google 翻译 API
                zh_desc=$(curl -s --get \
                  --data-urlencode "client=gtx" \
                  --data-urlencode "sl=en" \
                  --data-urlencode "tl=zh-CN" \
                  --data-urlencode "dt=t" \
                  --data-urlencode "q=$desc" \
            "https://translate.googleapis.com/translate_a/single" \
            | jq -r '.[0][0][0]')
          
              echo "📖 简介: ${zh_desc}" >> update.md
            else
              echo "📖 简介: (暂无介绍)" >> update.md
            fi

            echo "" >> update.md   # 换行美化
          done

          # Git 提交更新
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add update.md
          git commit -m "chore: daily Star & Fork update" || echo "No changes"
          git fetch origin main
          git rebase origin/main || git rebase --abort
          git push origin HEAD:main || git push --force-with-lease origin HEAD:main
          else
            echo "今天不进行 Star/Fork 🌱" >> update.md
          fi

      # 11. Clean up old merged branches
      - name: Clean up old merged branches
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          TARGET_REPO="${GITHUB_REPOSITORY}"
          NOW=$(date +%s)
          gh pr list --state merged --repo "$TARGET_REPO" --json number,headRefName,mergedAt -q '.[]' | while read pr; do
            PR_NUM=$(echo "$pr" | jq -r '.number')
            BRANCH=$(echo "$pr" | jq -r '.headRefName')
            MERGED_AT=$(echo "$pr" | jq -r '.mergedAt')
            MERGED_TS=$(date -u -d "$MERGED_AT" +%s)
            AGE=$(( (NOW - MERGED_TS) / 86400 ))
            if [[ "$BRANCH" == daily-pr-* && $AGE -gt 7 ]]; then
              echo "🗑️ 删除已合并超过 7 天的分支: $BRANCH (PR #$PR_NUM)"
              git push origin --delete "$BRANCH" || true
            fi
          done

      # 12. Daily summary
      - name: Write summary
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          NOW=$(date +"%Y-%m-%d %H:%M:%S")
          LOG_FILE="update.md"
          LOG_COUNT=$(grep -c '🌱' $LOG_FILE || echo 0)
          ISSUE_COUNT=$(grep -c '📝 创建了一个 Issue' $LOG_FILE || echo 0)
          PR_COUNT=$(grep -c '📦 提交了一个 PR' $LOG_FILE || echo 0)
          MERGED_COUNT=$(grep -c '✅ 自动合并了 PR' $LOG_FILE || echo 0)
          STAR_COUNT=$(grep -c '⭐' $LOG_FILE || echo 0)
          FORK_COUNT=$(grep -c '🍴' $LOG_FILE || echo 0)
          CLEAN_LOG_COUNT=$(grep -c '清理超过 7 天的旧日志' $LOG_FILE || echo 0)
          CLEAN_BRANCH_COUNT=$(grep -c '🗑️ 删除了已合并超过 7 天的分支' $LOG_FILE || echo 0)

          echo -e "\n### 🌙 今日总结" >> $LOG_FILE
          echo "[$NOW] 今日任务完成 ✅" >> $LOG_FILE
          echo "- 📝 日志条目: $LOG_COUNT" >> "$LOG_FILE"
          echo "- 🔧 创建 Issue: $ISSUE_COUNT" >> "$LOG_FILE"
          echo "- 📦 创建 PR: $PR_COUNT" >> "$LOG_FILE"
          echo "- ✅ 合并 PR: $MERGED_COUNT" >> "$LOG_FILE"
          echo "- ⭐ Star: $STAR_COUNT" >> "$LOG_FILE"
          echo "- 🍴 Fork: $FORK_COUNT" >> "$LOG_FILE"
          echo "- 🧹 清理日志: $CLEAN_LOG_COUNT" >> "$LOG_FILE"
          echo "- 🧹 清理分支: $CLEAN_BRANCH_COUNT" >> "$LOG_FILE"

          # 提交总结
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$LOG_FILE"
          git commit -m "chore: daily summary with counts" || echo "No changes"

          git fetch origin main
          git rebase origin/main || git rebase --abort
          git push origin HEAD:main || git push --force-with-lease origin HEAD:main
